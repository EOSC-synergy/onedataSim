config:
  project_repos:
    onedatasim:
      repo: 'https://github.com/EOSC-synergy/onedataSim'
      branch: ${GIT_LOCAL_BRANCH##*/}  # I'd like to be a variable i.e GIT_BRANCH
  credentials:
    - id: onedata-token-build-ajrm
      variable: TOKEN_BUILD
    - id: onedata-token-test4-ajrm
      variable: TOKEN_RUN
# If we will want a private DockerHub
#  credentials:
#    - id: onedataSim-dockerhub-xxx
#      username_var: JPL_DOCKERUSER
#      password_var: JPL_DOCKERPASS
#  environment:
# #  JPL_DOCKERSERVER: "hub.docker.com"
#   JPL_DOCKERPUSH: "onedataSim"
#   JPL_DOCKERFORCEBUILD: "True"
# #  LANG: C.UTF-8
sqa_criteria:
  qc_functional:
    repos:
      onedatasim:
        # we need a complete build to test simulations
        container: onedatasim-build
        #environment:
        #  - ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
        #  - ONECLIENT_PROVIDER_HOST="mon01-tic.ciemat.es"
        commands:
          - >
            env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
            env ONECLIENT_PROVIDER_HOST="mon01-tic.ciemat.es"
            ls -alh /mnt/datahub.egi.eu
          #- unittest   
  qc_coverage:
    repos:
      onedatasim:
        container: onedatasim-build
        commands:
          - >
            env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
            env ONECLIENT_PROVIDER_HOST="mon01-tic.ciemat.es"
            pip install coverage && coverage run -m unittest discover -s /opt/onedataSim 
          #- cover
  qc_security:
    repos:
      onedatasim:
         # we need testing security of unittests..., not only with plain code.    
        container: onedatasim-build
        commands:
          - >
            env ONECLIENT_ACCESS_TOKEN=${TOKEN_RUN}
            env ONECLIENT_PROVIDER_HOST="mon01-tic.ciemat.es"
            bandit -r /opt/onedataSim -x tests -s B404,B602,B603
          #- bandit -r /onedatasim-repo -x tests

timeout: 900
